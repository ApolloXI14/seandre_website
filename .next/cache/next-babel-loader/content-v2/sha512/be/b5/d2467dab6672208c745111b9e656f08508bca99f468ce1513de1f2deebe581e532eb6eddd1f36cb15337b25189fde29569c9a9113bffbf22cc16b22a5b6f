{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n// TODO: USE IMPORTDATA HERE TO GENERATE ARRAY OF WRAPPED COMPONENT JOURNAL ENTRIES\n// THEN USE \"ID\" PARAM TO GET CORRECT ARRAY INDEX\nimport { useRouter } from 'next/router';\nimport React, { Component } from 'react'; // import { ImportData } from '../../components/ImportData';\n\nimport parse from 'html-react-parser';\n\nfunction loadJournalEntries() {// const JournalEntryWithData = ImportData(JournalEntry, require.context(JOURNAL_DIR, true, /.txt$/));\n}\n\nexport function getStaticProps() {\n  return _getStaticProps.apply(this, arguments);\n}\n\nfunction _getStaticProps() {\n  _getStaticProps = _asyncToGenerator(function* () {\n    function getFileMetaData(str) {\n      // TODO: Export to own utility later, to de-duplicate\n      var strArr = str.split('__');\n      var fileDate = strArr[0];\n      fileDate = fileDate.replace('./', '');\n      fileDate = fileDate.slice(2, 4) + '/' + fileDate.slice(4, 6) + '/' + fileDate.slice(0, 2);\n      var fileName = strArr[1];\n      fileName = fileName.replace('.txt', '');\n      fileName = fileName.replace(/_/g, ' ');\n      return [fileName, fileDate];\n    }\n\n    var entriesArray = [];\n\n    var req = require.context(process.env.JOURNAL_DIR, true, /.txt$/);\n\n    var reqMap = req.keys().map( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (fileName) {\n        //console.log('parse: ', parse(req(fileName)));\n        // TODO: Change the way HTML is rendered, because NextJS build throws error because of \"parse(...)\" in array\n        //entriesArray.push( [getFileMetaData(fileName), parse(req(fileName))]); \n        entriesArray.push([fileName, getFileMetaData(fileName)]);\n        return {\n          entriesArray\n        };\n      });\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()); //console.log('entriesArray: ', entriesArray);\n    //return entriesArray;\n\n    return {\n      props: {\n        entriesArray: yield Promise.all(reqMap)\n      }\n    };\n  });\n  return _getStaticProps.apply(this, arguments);\n}\n\nexport function getStaticPaths() {\n  return _getStaticPaths.apply(this, arguments);\n}\n\nfunction _getStaticPaths() {\n  _getStaticPaths = _asyncToGenerator(function* () {\n    var req = require.context(process.env.JOURNAL_DIR, true, /.txt$/); //console.log('getStaticPaths test: ', req);\n\n\n    var paths = req.keys().map((fileName, index) => {\n      return {\n        params: {\n          id: (index++).toString()\n        }\n      };\n    }); //console.log('getStaticPaths test 2: ', paths);\n\n    return {\n      paths,\n      fallback: false\n    }; // return {\n    //   paths: [\n    //     { params: { ... } } // See the \"paths\" section below\n    //   ],\n    //   fallback: false\n    // };\n  });\n  return _getStaticPaths.apply(this, arguments);\n}\n\nvar JournalEntry = (_ref) => {\n  var {\n    entriesArray\n  } = _ref;\n  // const entriesArray = loadJournalEntries();\n  // console.log('test: ', entriesArray);\n  var router = useRouter();\n  var {\n    id\n  } = router.query; // console.log('test2: ', entriesArray[id - 1]);\n\n  var testVar = entriesArray[id - 1];\n  console.log('testVar: ', testVar);\n\n  var req = require.context(process.env.JOURNAL_DIR, true, /.txt$/); // let html = parse(req(entriesArray[id]));\n  // console.log('html: ', html);\n  //console.log('html: ', html);\n\n\n  return /*#__PURE__*/React.createElement(\"p\", null, \"JournalEntry: \", id);\n};\n\nexport default JournalEntry;","map":null,"metadata":{},"sourceType":"module"}