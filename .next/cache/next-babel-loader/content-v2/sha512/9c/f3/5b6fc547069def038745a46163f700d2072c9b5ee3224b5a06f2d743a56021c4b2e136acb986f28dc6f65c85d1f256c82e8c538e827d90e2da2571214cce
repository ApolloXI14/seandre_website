{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault2 = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault2(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.render = render;\nexports.renderError = renderError;\nexports.default = exports.emitter = exports.router = exports.version = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nrequire(\"@next/polyfill-module\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _headManagerContext = require(\"../next-server/lib/head-manager-context\");\n\nvar _mitt = _interopRequireDefault(require(\"../next-server/lib/mitt\"));\n\nvar _routerContext = require(\"../next-server/lib/router-context\");\n\nvar _router = require(\"../next-server/lib/router/router\");\n\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\n\nvar querystring = _interopRequireWildcard(require(\"../next-server/lib/router/utils/querystring\"));\n\nvar envConfig = _interopRequireWildcard(require(\"../next-server/lib/runtime-config\"));\n\nvar _utils = require(\"../next-server/lib/utils\");\n\nvar _portal = require(\"./portal\");\n\nvar _headManager = _interopRequireDefault(require(\"./head-manager\"));\n\nvar _pageLoader = _interopRequireDefault(require(\"./page-loader\"));\n\nvar _performanceRelayer = _interopRequireDefault(require(\"./performance-relayer\"));\n\nvar _routeAnnouncer = require(\"./route-announcer\");\n\nvar _router2 = require(\"./router\");\n/* global location */\n\n\nvar data = JSON.parse(document.getElementById('__NEXT_DATA__').textContent);\nwindow.__NEXT_DATA__ = data;\nvar version = \"10.2.3\";\nexports.version = version;\n\nvar looseToArray = input => [].slice.call(input);\n\nvar {\n  props: hydrateProps,\n  err: hydrateErr,\n  page,\n  query,\n  buildId,\n  assetPrefix,\n  runtimeConfig,\n  dynamicIds,\n  isFallback,\n  locale,\n  locales,\n  domainLocales,\n  isPreview\n} = data;\nvar {\n  defaultLocale\n} = data;\nvar prefix = assetPrefix || ''; // With dynamic assetPrefix it's no longer possible to set assetPrefix at the build time\n// So, this is how we do it in the client side at runtime\n\n__webpack_public_path__ = \"\".concat(prefix, \"/_next/\"); //eslint-disable-line\n// Initialize next/config with the environment configuration\n\nenvConfig.setConfig({\n  serverRuntimeConfig: {},\n  publicRuntimeConfig: runtimeConfig || {}\n});\nvar asPath = (0, _utils.getURL)(); // make sure not to attempt stripping basePath for 404s\n\nif ((0, _router.hasBasePath)(asPath)) {\n  asPath = (0, _router.delBasePath)(asPath);\n}\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  var {\n    normalizeLocalePath\n  } = require('../next-server/lib/i18n/normalize-locale-path');\n\n  var {\n    detectDomainLocale\n  } = require('../next-server/lib/i18n/detect-domain-locale');\n\n  var {\n    parseRelativeUrl\n  } = require('../next-server/lib/router/utils/parse-relative-url');\n\n  var {\n    formatUrl\n  } = require('../next-server/lib/router/utils/format-url');\n\n  if (locales) {\n    var parsedAs = parseRelativeUrl(asPath);\n    var localePathResult = normalizeLocalePath(parsedAs.pathname, locales);\n\n    if (localePathResult.detectedLocale) {\n      parsedAs.pathname = localePathResult.pathname;\n      asPath = formatUrl(parsedAs);\n    } else {\n      // derive the default locale if it wasn't detected in the asPath\n      // since we don't prerender static pages with all possible default\n      // locales\n      defaultLocale = locale;\n    } // attempt detecting default locale based on hostname\n\n\n    var detectedDomain = detectDomainLocale(process.env.__NEXT_I18N_DOMAINS, window.location.hostname); // TODO: investigate if defaultLocale needs to be populated after\n    // hydration to prevent mismatched renders\n\n    if (detectedDomain) {\n      defaultLocale = detectedDomain.defaultLocale;\n    }\n  }\n}\n\nif (process.env.__NEXT_SCRIPT_LOADER && data.scriptLoader) {\n  var {\n    initScriptLoader\n  } = require('./experimental-script');\n\n  initScriptLoader(data.scriptLoader);\n}\n\nvar pageLoader = new _pageLoader.default(buildId, prefix);\n\nvar register = (_ref) => {\n  var [r, f] = _ref;\n  return pageLoader.routeLoader.onEntrypoint(r, f);\n};\n\nif (window.__NEXT_P) {\n  // Defer page registration for another tick. This will increase the overall\n  // latency in hydrating the page, but reduce the total blocking time.\n  window.__NEXT_P.map(p => setTimeout(() => register(p), 0));\n}\n\nwindow.__NEXT_P = [];\nwindow.__NEXT_P.push = register;\nvar headManager = (0, _headManager.default)();\nvar appElement = document.getElementById('__next');\nvar lastRenderReject;\nvar webpackHMR;\nvar router;\nexports.router = router;\nvar CachedApp, onPerfEntry;\n\nclass Container extends _react.default.Component {\n  componentDidCatch(componentErr, info) {\n    this.props.fn(componentErr, info);\n  }\n\n  componentDidMount() {\n    this.scrollToHash(); // We need to replace the router state if:\n    // - the page was (auto) exported and has a query string or search (hash)\n    // - it was auto exported and is a dynamic route (to provide params)\n    // - if it is a client-side skeleton (fallback render)\n\n    if (router.isSsr && // We don't update for 404 requests as this can modify\n    // the asPath unexpectedly e.g. adding basePath when\n    // it wasn't originally present\n    page !== '/404' && !(page === '/_error' && hydrateProps && hydrateProps.pageProps && hydrateProps.pageProps.statusCode === 404) && (isFallback || data.nextExport && ((0, _isDynamic.isDynamicRoute)(router.pathname) || location.search || process.env.__NEXT_HAS_REWRITES) || hydrateProps && hydrateProps.__N_SSG && (location.search || process.env.__NEXT_HAS_REWRITES))) {\n      // update query on mount for exported pages\n      router.replace(router.pathname + '?' + String(querystring.assign(querystring.urlQueryToSearchParams(router.query), new URLSearchParams(location.search))), asPath, {\n        // @ts-ignore\n        // WARNING: `_h` is an internal option for handing Next.js\n        // client-side hydration. Your app should _never_ use this property.\n        // It may change at any time without notice.\n        _h: 1,\n        // Fallback pages must trigger the data fetch, so the transition is\n        // not shallow.\n        // Other pages (strictly updating query) happens shallowly, as data\n        // requirements would already be present.\n        shallow: !isFallback\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.scrollToHash();\n  }\n\n  scrollToHash() {\n    var {\n      hash\n    } = location;\n    hash = hash && hash.substring(1);\n    if (!hash) return;\n    var el = document.getElementById(hash);\n    if (!el) return; // If we call scrollIntoView() in here without a setTimeout\n    // it won't scroll properly.\n\n    setTimeout(() => el.scrollIntoView(), 0);\n  }\n\n  render() {\n    if (true) {\n      return this.props.children;\n    } else {\n      var {\n        ReactDevOverlay\n      } = require('@next/react-dev-overlay/lib/client');\n\n      return /*#__PURE__*/_react.default.createElement(ReactDevOverlay, null, this.props.children);\n    }\n  }\n\n}\n\nvar emitter = (0, _mitt.default)();\nexports.emitter = emitter;\nvar CachedComponent;\n\nvar _default = /*#__PURE__*/function () {\n  var _ref2 = (0, _asyncToGenerator2.default)(function* () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // This makes sure this specific lines are removed in production\n    if (false) {\n      webpackHMR = opts.webpackHMR;\n    }\n\n    var initialErr = hydrateErr;\n\n    try {\n      var appEntrypoint = yield pageLoader.routeLoader.whenEntrypoint('/_app');\n\n      if ('error' in appEntrypoint) {\n        throw appEntrypoint.error;\n      }\n\n      var {\n        component: app,\n        exports: mod\n      } = appEntrypoint;\n      CachedApp = app;\n\n      if (mod && mod.reportWebVitals) {\n        onPerfEntry = (_ref3) => {\n          var {\n            id,\n            name,\n            startTime,\n            value,\n            duration,\n            entryType,\n            entries\n          } = _ref3;\n          // Combines timestamp with random number for unique ID\n          var uniqueID = \"\".concat(Date.now(), \"-\").concat(Math.floor(Math.random() * (9e12 - 1)) + 1e12);\n          var perfStartEntry;\n\n          if (entries && entries.length) {\n            perfStartEntry = entries[0].startTime;\n          }\n\n          mod.reportWebVitals({\n            id: id || uniqueID,\n            name,\n            startTime: startTime || perfStartEntry,\n            value: value == null ? duration : value,\n            label: entryType === 'mark' || entryType === 'measure' ? 'custom' : 'web-vital'\n          });\n        };\n      }\n\n      var pageEntrypoint = // The dev server fails to serve script assets when there's a hydration\n      // error, so we need to skip waiting for the entrypoint.\n      false && hydrateErr ? {\n        error: hydrateErr\n      } : yield pageLoader.routeLoader.whenEntrypoint(page);\n\n      if ('error' in pageEntrypoint) {\n        throw pageEntrypoint.error;\n      }\n\n      CachedComponent = pageEntrypoint.component;\n\n      if (false) {\n        var {\n          isValidElementType\n        } = require('react-is');\n\n        if (!isValidElementType(CachedComponent)) {\n          throw new Error(\"The default export is not a React Component in page: \\\"\".concat(page, \"\\\"\"));\n        }\n      }\n    } catch (error) {\n      // This catches errors like throwing in the top level of a module\n      initialErr = error;\n    }\n\n    if (false) {\n      var {\n        getNodeError\n      } = require('@next/react-dev-overlay/lib/client'); // Server-side runtime errors need to be re-thrown on the client-side so\n      // that the overlay is rendered.\n\n\n      if (initialErr) {\n        if (initialErr === hydrateErr) {\n          setTimeout(() => {\n            var error;\n\n            try {\n              // Generate a new error object. We `throw` it because some browsers\n              // will set the `stack` when thrown, and we want to ensure ours is\n              // not overridden when we re-throw it below.\n              throw new Error(initialErr.message);\n            } catch (e) {\n              error = e;\n            }\n\n            error.name = initialErr.name;\n            error.stack = initialErr.stack;\n            var node = getNodeError(error);\n            throw node;\n          });\n        } // We replaced the server-side error with a client-side error, and should\n        // no longer rewrite the stack trace to a Node error.\n        else {\n            setTimeout(() => {\n              throw initialErr;\n            });\n          }\n      }\n    }\n\n    if (window.__NEXT_PRELOADREADY) {\n      yield window.__NEXT_PRELOADREADY(dynamicIds);\n    }\n\n    exports.router = router = (0, _router2.createRouter)(page, query, asPath, {\n      initialProps: hydrateProps,\n      pageLoader,\n      App: CachedApp,\n      Component: CachedComponent,\n      wrapApp,\n      err: initialErr,\n      isFallback: Boolean(isFallback),\n      subscription: (info, App, scroll) => render(Object.assign({}, info, {\n        App,\n        scroll\n      })),\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview\n    });\n    var renderCtx = {\n      App: CachedApp,\n      initial: true,\n      Component: CachedComponent,\n      props: hydrateProps,\n      err: initialErr\n    };\n\n    if (true) {\n      render(renderCtx);\n      return emitter;\n    } else {\n      return {\n        emitter,\n        render,\n        renderCtx\n      };\n    }\n  });\n\n  return function _default() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.default = _default;\n\nfunction render(_x) {\n  return _render.apply(this, arguments);\n} // This method handles all runtime and debug errors.\n// 404 and 500 errors are special kind of errors\n// and they are still handle via the main render method.\n\n\nfunction _render() {\n  _render = (0, _asyncToGenerator2.default)(function* (renderingProps) {\n    if (renderingProps.err) {\n      yield renderError(renderingProps);\n      return;\n    }\n\n    try {\n      yield doRender(renderingProps);\n    } catch (renderErr) {\n      // bubble up cancelation errors\n      if (renderErr.cancelled) {\n        throw renderErr;\n      }\n\n      if (false) {\n        // Ensure this error is displayed in the overlay in development\n        setTimeout(() => {\n          throw renderErr;\n        });\n      }\n\n      yield renderError((0, _extends2.default)({}, renderingProps, {\n        err: renderErr\n      }));\n    }\n  });\n  return _render.apply(this, arguments);\n}\n\nfunction renderError(renderErrorProps) {\n  var {\n    App,\n    err\n  } = renderErrorProps; // In development runtime errors are caught by our overlay\n  // In production we catch runtime errors using componentDidCatch which will trigger renderError\n\n  if (false) {\n    // A Next.js rendering runtime error is always unrecoverable\n    // FIXME: let's make this recoverable (error in GIP client-transition)\n    webpackHMR.onUnrecoverableError(); // We need to render an empty <App> so that the `<ReactDevOverlay>` can\n    // render itself.\n\n    return doRender({\n      App: () => null,\n      props: {},\n      Component: () => null,\n      styleSheets: []\n    });\n  } // Make sure we log the error to the console, otherwise users can't track down issues.\n\n\n  console.error(err);\n  return pageLoader.loadPage('/_error').then((_ref4) => {\n    var {\n      page: ErrorComponent,\n      styleSheets\n    } = _ref4;\n    // In production we do a normal render with the `ErrorComponent` as component.\n    // If we've gotten here upon initial render, we can use the props from the server.\n    // Otherwise, we need to call `getInitialProps` on `App` before mounting.\n    var AppTree = wrapApp(App);\n    var appCtx = {\n      Component: ErrorComponent,\n      AppTree,\n      router,\n      ctx: {\n        err,\n        pathname: page,\n        query,\n        asPath,\n        AppTree\n      }\n    };\n    return Promise.resolve(renderErrorProps.props ? renderErrorProps.props : (0, _utils.loadGetInitialProps)(App, appCtx)).then(initProps => doRender((0, _extends2.default)({}, renderErrorProps, {\n      err,\n      Component: ErrorComponent,\n      styleSheets,\n      props: initProps\n    })));\n  });\n}\n\nvar reactRoot = null;\nvar shouldHydrate = typeof _reactDom.default.hydrate === 'function';\n\nfunction renderReactElement(domEl, fn) {\n  // mark start of hydrate/render\n  if (_utils.ST) {\n    performance.mark('beforeRender');\n  }\n\n  var reactEl = fn(shouldHydrate ? markHydrateComplete : markRenderComplete);\n\n  if (process.env.__NEXT_REACT_ROOT) {\n    if (!reactRoot) {\n      var createRootName = typeof _reactDom.default.unstable_createRoot === 'function' ? 'unstable_createRoot' : 'createRoot';\n      reactRoot = _reactDom.default[createRootName](domEl, {\n        hydrate: shouldHydrate\n      });\n    }\n\n    reactRoot.render(reactEl);\n    shouldHydrate = false;\n  } else {\n    // The check for `.hydrate` is there to support React alternatives like preact\n    if (shouldHydrate) {\n      _reactDom.default.hydrate(reactEl, domEl);\n\n      shouldHydrate = false;\n    } else {\n      _reactDom.default.render(reactEl, domEl);\n    }\n  }\n}\n\nfunction markHydrateComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterHydrate'); // mark end of hydration\n\n  performance.measure('Next.js-before-hydration', 'navigationStart', 'beforeRender');\n  performance.measure('Next.js-hydration', 'beforeRender', 'afterHydrate');\n\n  if (onPerfEntry) {\n    performance.getEntriesByName('Next.js-hydration').forEach(onPerfEntry);\n  }\n\n  clearMarks();\n}\n\nfunction markRenderComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterRender'); // mark end of render\n\n  var navStartEntries = performance.getEntriesByName('routeChange', 'mark');\n  if (!navStartEntries.length) return;\n  performance.measure('Next.js-route-change-to-render', navStartEntries[0].name, 'beforeRender');\n  performance.measure('Next.js-render', 'beforeRender', 'afterRender');\n\n  if (onPerfEntry) {\n    performance.getEntriesByName('Next.js-render').forEach(onPerfEntry);\n    performance.getEntriesByName('Next.js-route-change-to-render').forEach(onPerfEntry);\n  }\n\n  clearMarks();\n  ['Next.js-route-change-to-render', 'Next.js-render'].forEach(measure => performance.clearMeasures(measure));\n}\n\nfunction clearMarks() {\n  ;\n  ['beforeRender', 'afterHydrate', 'afterRender', 'routeChange'].forEach(mark => performance.clearMarks(mark));\n}\n\nfunction AppContainer(_ref5) {\n  var {\n    children\n  } = _ref5;\n  return /*#__PURE__*/_react.default.createElement(Container, {\n    fn: error => renderError({\n      App: CachedApp,\n      err: error\n    }).catch(err => console.error('Error rendering page: ', err))\n  }, /*#__PURE__*/_react.default.createElement(_routerContext.RouterContext.Provider, {\n    value: (0, _router2.makePublicRouterInstance)(router)\n  }, /*#__PURE__*/_react.default.createElement(_headManagerContext.HeadManagerContext.Provider, {\n    value: headManager\n  }, children)));\n}\n\nvar wrapApp = App => wrappedAppProps => {\n  var appProps = (0, _extends2.default)({}, wrappedAppProps, {\n    Component: CachedComponent,\n    err: hydrateErr,\n    router\n  });\n  return /*#__PURE__*/_react.default.createElement(AppContainer, null, /*#__PURE__*/_react.default.createElement(App, appProps));\n};\n\nvar lastAppProps;\n\nfunction doRender(input) {\n  var {\n    App,\n    Component,\n    props,\n    err\n  } = input;\n  var styleSheets = 'initial' in input ? undefined : input.styleSheets;\n  Component = Component || lastAppProps.Component;\n  props = props || lastAppProps.props;\n  var appProps = (0, _extends2.default)({}, props, {\n    Component,\n    err,\n    router\n  }); // lastAppProps has to be set before ReactDom.render to account for ReactDom throwing an error.\n\n  lastAppProps = appProps;\n  var canceled = false;\n  var resolvePromise;\n  var renderPromise = new Promise((resolve, reject) => {\n    if (lastRenderReject) {\n      lastRenderReject();\n    }\n\n    resolvePromise = () => {\n      lastRenderReject = null;\n      resolve();\n    };\n\n    lastRenderReject = () => {\n      canceled = true;\n      lastRenderReject = null;\n      var error = new Error('Cancel rendering route');\n      error.cancelled = true;\n      reject(error);\n    };\n  }); // This function has a return type to ensure it doesn't start returning a\n  // Promise. It should remain synchronous.\n\n  function onStart() {\n    if (!styleSheets || // We use `style-loader` in development, so we don't need to do anything\n    // unless we're in production:\n    false) {\n      return false;\n    }\n\n    var currentStyleTags = looseToArray(document.querySelectorAll('style[data-n-href]'));\n    var currentHrefs = new Set(currentStyleTags.map(tag => tag.getAttribute('data-n-href')));\n    var noscript = document.querySelector('noscript[data-n-css]');\n    var nonce = noscript == null ? void 0 : noscript.getAttribute('data-n-css');\n    styleSheets.forEach((_ref6) => {\n      var {\n        href,\n        text\n      } = _ref6;\n\n      if (!currentHrefs.has(href)) {\n        var styleTag = document.createElement('style');\n        styleTag.setAttribute('data-n-href', href);\n        styleTag.setAttribute('media', 'x');\n\n        if (nonce) {\n          styleTag.setAttribute('nonce', nonce);\n        }\n\n        document.head.appendChild(styleTag);\n        styleTag.appendChild(document.createTextNode(text));\n      }\n    });\n    return true;\n  }\n\n  function onHeadCommit() {\n    if ( // We use `style-loader` in development, so we don't need to do anything\n    // unless we're in production:\n    true && // We can skip this during hydration. Running it wont cause any harm, but\n    // we may as well save the CPU cycles:\n    styleSheets && // Ensure this render was not canceled\n    !canceled) {\n      var desiredHrefs = new Set(styleSheets.map(s => s.href));\n      var currentStyleTags = looseToArray(document.querySelectorAll('style[data-n-href]'));\n      var currentHrefs = currentStyleTags.map(tag => tag.getAttribute('data-n-href')); // Toggle `<style>` tags on or off depending on if they're needed:\n\n      for (var idx = 0; idx < currentHrefs.length; ++idx) {\n        if (desiredHrefs.has(currentHrefs[idx])) {\n          currentStyleTags[idx].removeAttribute('media');\n        } else {\n          currentStyleTags[idx].setAttribute('media', 'x');\n        }\n      } // Reorder styles into intended order:\n\n\n      var referenceNode = document.querySelector('noscript[data-n-css]');\n\n      if ( // This should be an invariant:\n      referenceNode) {\n        styleSheets.forEach((_ref7) => {\n          var {\n            href\n          } = _ref7;\n          var targetTag = document.querySelector(\"style[data-n-href=\\\"\".concat(href, \"\\\"]\"));\n\n          if ( // This should be an invariant:\n          targetTag) {\n            referenceNode.parentNode.insertBefore(targetTag, referenceNode.nextSibling);\n            referenceNode = targetTag;\n          }\n        });\n      } // Finally, clean up server rendered stylesheets:\n\n\n      looseToArray(document.querySelectorAll('link[data-n-p]')).forEach(el => {\n        el.parentNode.removeChild(el);\n      }); // Force browser to recompute layout, which should prevent a flash of\n      // unstyled content:\n\n      getComputedStyle(document.body, 'height');\n    }\n\n    if (input.scroll) {\n      window.scrollTo(input.scroll.x, input.scroll.y);\n    }\n  }\n\n  function onRootCommit() {\n    resolvePromise();\n  }\n\n  onStart();\n\n  var elem = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(Head, {\n    callback: onHeadCommit\n  }), /*#__PURE__*/_react.default.createElement(AppContainer, null, /*#__PURE__*/_react.default.createElement(App, appProps), /*#__PURE__*/_react.default.createElement(_portal.Portal, {\n    type: \"next-route-announcer\"\n  }, /*#__PURE__*/_react.default.createElement(_routeAnnouncer.RouteAnnouncer, null)))); // We catch runtime errors using componentDidCatch which will trigger renderError\n\n\n  renderReactElement(appElement, callback => /*#__PURE__*/_react.default.createElement(Root, {\n    callbacks: [callback, onRootCommit]\n  }, process.env.__NEXT_STRICT_MODE ? /*#__PURE__*/_react.default.createElement(_react.default.StrictMode, null, elem) : elem));\n  return renderPromise;\n}\n\nfunction Root(_ref8) {\n  var {\n    callbacks,\n    children\n  } = _ref8;\n\n  // We use `useLayoutEffect` to guarantee the callbacks are executed\n  // as soon as React flushes the update\n  _react.default.useLayoutEffect(() => callbacks.forEach(callback => callback()), [callbacks]);\n\n  if (process.env.__NEXT_TEST_MODE) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    _react.default.useEffect(() => {\n      window.__NEXT_HYDRATED = true;\n\n      if (window.__NEXT_HYDRATED_CB) {\n        window.__NEXT_HYDRATED_CB();\n      }\n    }, []);\n  } // We should ask to measure the Web Vitals after rendering completes so we\n  // don't cause any hydration delay:\n\n\n  _react.default.useEffect(() => {\n    (0, _performanceRelayer.default)(onPerfEntry);\n  }, []);\n\n  return children;\n} // Dummy component that we render as a child of Root so that we can\n// toggle the correct styles before the page is rendered.\n\n\nfunction Head(_ref9) {\n  var {\n    callback\n  } = _ref9;\n\n  // We use `useLayoutEffect` to guarantee the callback is executed\n  // as soon as React flushes the update.\n  _react.default.useLayoutEffect(() => callback(), [callback]);\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"script"}